Lab Exam SW Quality 2016-12-17 G2: Fixture Setup + Custom Asserts 
---------------------------------------------------------------------

Refactoring
---------------------------------------------------------------------
Bauen Sie den gegebenen Test "testTree()" in der Klasse 
"TreeTest" mittels Delegated Fixture Setup (create Method) und 
Custom Asserts so um, dass sich die @Test Methode auf den gegebenen 
Code reduziert.

Vorher:
	@Test
	public void testTree()
	{
		Assert.assertEquals(11, tree.getId());
		Assert.assertEquals(2, tree.getNodes().size());
		
		Assert.assertEquals(4, tree.getNodes().get(0).getId());
		Assert.assertEquals(2, tree.getNodes().get(0).getNodes().size());
		Assert.assertEquals(5, tree.getNodes().get(0).getNodes().get(0).getId());
		Assert.assertEquals(1, tree.getNodes().get(0).getNodes().get(1).getId());
		Assert.assertEquals(2, tree.getNodes().get(0).getNodes().get(1).getNodes().size());
		Assert.assertEquals(2, tree.getNodes().get(0).getNodes().get(1).getNodes().get(0).getId());
		Assert.assertEquals(3, tree.getNodes().get(0).getNodes().get(1).getNodes().get(1).getId());
	
		Assert.assertEquals(9, tree.getNodes().get(1).getId());
		Assert.assertEquals(2, tree.getNodes().get(1).getNodes().size());
		Assert.assertEquals(6, tree.getNodes().get(1).getNodes().get(0).getId());
		Assert.assertEquals(2, tree.getNodes().get(1).getNodes().get(0).getNodes().size());
		Assert.assertEquals(7, tree.getNodes().get(1).getNodes().get(0).getNodes().get(0).getId());
		Assert.assertEquals(8, tree.getNodes().get(1).getNodes().get(0).getNodes().get(1).getId());
		Assert.assertEquals(10, tree.getNodes().get(1).getNodes().get(1).getId());
	}

Nachher:
	@Test
	public void testTree()
	{
		Node expected = createExpectedTree();
		
		assertEquals(expected, tree);
	}
	
Tipp: Sie können mit dem Befehl "instanceof" den konkreten Typ eines
Objects überprüfen, z.B.: expected instanceof File

Tipp: Ändern Sie die Werte in der tree Objekt-Struktur um zu überprüfen, 
ob alle Objekte verglichen werden!


Allgemeines
---------------------------------------------------------------------

1. Project Name
	Nennen Sie das Projekt (und das abgegebene ZIP File) so um, dass 
	statt "MyName" ihr Name verwendet wird. Beachten Sie, dass Projekten 
	die nicht der Namenskonvention entsprechen 50% der Punkte abgezogen
	werden!

2. Manuelles Review
	Bei der Notenvergabe wird für jede Lösung ein manuelles Code-Review 
	durchgeführt. Die automatischen Tests sollen den Lösungsweg aufzeigen
	und in der Umsetzung Feedback geben. Funktionale Tests können aber nicht
	sicherstellen, dass die Implementierungs- und Design-Strukturen eingehalten
	wurden. Es ist daher auch möglich, trotz laufender Tests Punkteabzüge zu
	bekommen. Die Punkteabzüge können in einer Einsichtnahme besprochen werden.
	
3. Compiler Errors
	Implementierungen die nicht kompilieren, werden nicht gewertet. 
	Ausgenommen sind Code-Teile die bereits im Projekt vorhanden sind 
	(z.B.: Tests kompilieren nicht, weil die zu testenden Klassen nicht 
	implementiert wurden). 		
	 